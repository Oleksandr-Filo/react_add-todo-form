{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","React","memo","todo","title","completed","cn","TodoList","todos","map","getUserById","users","find","todoList","userId","usersFromServer","getLargestTodoId","Math","max","App","userNameDefaultValue","useState","setTitle","selectedUserName","setUser","setTodos","isErrorOnUserSelect","setIsErrorOnUserSelect","isErrorOnTitleInput","setIsErrorOnTitleInput","Paper","sx","padding","elevation","action","method","onSubmit","event","preventDefault","newUser","getUserByName","currentTodo","defaultUserName","FormControl","marginBottom","width","error","TextField","type","label","value","onChange","currentTarget","placeholder","autoComplete","FormHelperText","position","bottom","InputLabel","Select","labelId","target","MenuItem","disabled","userInfo","Button","display","variant","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cfc591a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = React.memo(\n  ({ todo }) => {\n    const {\n      id,\n      title,\n      user,\n      completed,\n    } = todo;\n\n    return (\n      <article\n        data-id={id}\n        className={cn(\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )}\n      >\n        <h2 className=\"TodoInfo__title\">\n          {title}\n        </h2>\n\n        {user && <UserInfo user={user} />}\n      </article>\n    );\n  },\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUserById(users: User[], id: number) {\n  return users.find(user => id === user.id) || null;\n}\n\nconst todoList: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(usersFromServer, todo.userId),\n}));\n\nfunction getUserByName(name: string, users: User[]) {\n  return users.find(user => name === user.name) || null;\n}\n\nfunction getLargestTodoId(todos: Todo[]) {\n  return Math.max(...todos.map(todo => todo.id));\n}\n\nexport const App: React.FC = () => {\n  const titleDefaultValue = '';\n  const userNameDefaultValue = 'Choose a user';\n\n  const [title, setTitle] = useState(titleDefaultValue);\n  const [selectedUserName, setUser] = useState(userNameDefaultValue);\n  const [todos, setTodos] = useState(todoList);\n  const [isErrorOnUserSelect, setIsErrorOnUserSelect] = useState(false);\n  const [isErrorOnTitleInput, setIsErrorOnTitleInput] = useState(false);\n\n  const clearForm = (defaultTitle: string, defaultUserName: string) => {\n    setTitle(defaultTitle);\n    setUser(defaultUserName);\n  };\n\n  const handleSubmitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (\n      selectedUserName !== userNameDefaultValue && title !== titleDefaultValue\n    ) {\n      const newUser = getUserByName(selectedUserName, usersFromServer);\n\n      setTodos(currentTodo => (\n        [\n          ...currentTodo,\n          {\n            id: getLargestTodoId(todos) + 1,\n            title,\n            completed: false,\n            userId: newUser ? newUser.id : null,\n            user: newUser,\n          },\n        ]\n      ));\n\n      clearForm(titleDefaultValue, userNameDefaultValue);\n    }\n\n    if (selectedUserName === userNameDefaultValue) {\n      setIsErrorOnUserSelect(true);\n    }\n\n    if (title === titleDefaultValue) {\n      setIsErrorOnTitleInput(true);\n    }\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n    setIsErrorOnTitleInput(false);\n  };\n\n  const handleUserChange = (event: SelectChangeEvent) => {\n    setUser(event.target.value);\n    setIsErrorOnUserSelect(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Paper\n        sx={{ padding: '16px' }}\n        elevation={3}\n      >\n        <h1>Add todo form</h1>\n\n        <form\n          action=\"/api/users\"\n          method=\"POST\"\n          onSubmit={handleSubmitForm}\n          className=\"App__form\"\n        >\n          <FormControl\n            sx={{ marginBottom: '32px', width: '300px' }}\n            error={isErrorOnTitleInput}\n          >\n\n            <TextField\n              error={isErrorOnTitleInput}\n              id=\"outlined-error-helper-text\"\n              type=\"text\"\n              name=\"titleInput\"\n              label=\"Title: \"\n              value={title}\n              onChange={handleTitleChange}\n              placeholder=\"Enter a title\"\n              data-cy=\"titleInput\"\n              autoComplete=\"off\"\n            />\n            {isErrorOnTitleInput && (\n              <FormHelperText\n                sx={{ position: 'absolute', bottom: '-20px' }}\n              >\n                Please enter a title\n              </FormHelperText>\n            )}\n          </FormControl>\n\n          <FormControl\n            sx={{ marginBottom: '32px', width: '300px' }}\n            error={isErrorOnUserSelect}\n          >\n            <InputLabel id=\"demo-simple-select-error-label\">\n              {'User: '}\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-error-label\"\n              id=\"demo-simple-select-helper\"\n              name=\"userSelect\"\n              value={selectedUserName}\n              label=\"User: \"\n              onChange={handleUserChange}\n              data-cy=\"userSelect\"\n            >\n              <MenuItem value={userNameDefaultValue} disabled>\n                {userNameDefaultValue}\n              </MenuItem>\n              {usersFromServer.map(userInfo => (\n                <MenuItem value={userInfo.name} key={userInfo.id}>\n                  {userInfo.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {isErrorOnUserSelect && (\n              <FormHelperText\n                sx={{ position: 'absolute', bottom: '-20px' }}\n              >\n                Please choose a user\n              </FormHelperText>\n            )}\n          </FormControl>\n\n          <Button\n            sx={{ display: 'block' }}\n            type=\"submit\"\n            variant=\"contained\"\n            data-cy=\"submitButton\"\n            color={(\n              isErrorOnTitleInput || isErrorOnUserSelect\n                ? 'error'\n                : 'primary'\n            )}\n          >\n            Add\n          </Button>\n        </form>\n\n        <TodoList todos={todos} />\n      </Paper>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}